// Code generated by go-bindata.
// sources:
// bashenv/bash.bash
// bashenv/cmd.bash
// bashenv/fn.bash
// bashenv/plugn.bash
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bashenvBashBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\x5f\x6b\xdb\x30\x14\xc5\x9f\x97\x4f\x71\x22\x02\xde\x60\x89\x61\xe4\x29\x23\x81\x84\x6d\x64\x2f\xf1\x58\xc6\x68\x09\xa1\x28\xf2\x75\x2c\x2a\x4b\x45\x57\x26\xcd\xb7\xaf\xe4\x36\xc5\x4d\xfb\x64\xa3\x7b\xce\xef\xdc\x3f\x03\x5d\x61\xb7\x83\x18\xad\x96\xdb\xf5\xdd\xff\x9f\x7f\xb7\xbf\x37\xbf\x0a\x81\xb1\x09\x10\x53\x81\xfd\xfe\x3b\x42\x4d\x76\xf0\x89\x54\xed\x20\x86\x43\xdc\xba\xd6\x83\xcf\x1c\xa8\xc1\x4a\x72\x0d\xcd\x70\x6d\x80\xab\x50\xca\x40\x33\xf4\x58\xc5\x46\xf4\x9c\x7f\x0c\x49\x26\xb4\x0f\x47\x2f\x4b\x42\x70\xcf\xfe\x29\x9c\xc7\xd1\x53\x34\xfb\x49\xd4\x5f\x5a\xfa\xdc\x5a\xd9\xd0\x17\x81\xf9\x1c\xe2\x87\xf4\x27\x6d\xfb\x0d\x75\xdc\x97\x0f\x44\x61\x51\x6c\x71\xf3\x15\x6d\x4c\x58\xbb\x86\x0e\x9e\x4e\x29\x42\x5b\x0e\xd2\x18\x98\x88\xe7\xd0\x25\xce\xc4\xc5\x96\x01\x18\xa1\x93\x5e\x74\x87\x28\xc8\xae\xe9\xff\x62\x22\x64\x59\x42\x87\xc4\xcc\x29\xa8\x9c\x6b\x32\x86\x21\x6d\x09\x55\x4b\x7b\x24\x9c\xd3\x66\x62\xbe\xcf\x18\x5d\xf5\x3a\x88\xdb\xd2\xc5\x0a\xc6\x0a\xa2\x7b\xce\x5b\xf6\xb9\x71\x4a\x9a\xfc\xa0\x6d\x9e\xb2\xb1\x58\xf4\xf9\x22\x7b\x8b\x50\x75\xf2\xf3\x47\xce\x77\x5d\x2f\x61\xd3\x0e\xc8\x37\xda\x4a\x03\x26\x66\xed\x6c\xba\x57\xda\x60\x2c\xaa\xf8\x22\xfd\x39\x8d\x14\xe4\x3d\x81\xaa\x8a\x54\x98\x88\x57\x50\xa5\xe3\xf9\x1e\xe3\xd0\xdf\x06\xf1\xf7\x29\x00\x00\xff\xff\xbe\x15\xe5\x0d\x2d\x02\x00\x00")

func bashenvBashBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvBashBash,
		"bashenv/bash.bash",
	)
}

func bashenvBashBash() (*asset, error) {
	bytes, err := bashenvBashBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/bash.bash", size: 557, mode: os.FileMode(420), modTime: time.Unix(1492033206, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvCmdBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x41\x73\x9b\x3c\x10\x3d\xc3\xaf\xd8\x4f\x51\x32\xc9\x81\xe1\xc3\xa7\x0e\x1e\x77\x9c\x69\x7b\x6b\x7b\xc9\xd1\x38\x33\x2a\x88\xc0\x58\x16\x1e\x84\xdd\x74\x30\xff\xbd\xbb\x42\x60\x88\x7d\x6a\x2e\x46\xbb\xab\xdd\xf7\x9e\xde\xc6\xcf\x64\xaa\x44\x2d\x21\x78\x86\x2f\x3f\xbe\xbe\xf8\x7e\xba\xcf\x02\x55\x9a\xe6\xf1\x09\x5a\xdf\x1b\xd2\x99\x34\xe9\x8a\x7d\xc7\xb8\x01\x71\x12\xa5\x12\xbf\x94\x84\xb4\xda\xef\x85\xce\x0c\xbb\x14\x6a\xb3\x62\x3c\xc2\xc0\xd0\x27\xd8\xc9\x3f\x06\x18\xd7\x86\xc1\x19\x8c\xcc\x80\x99\x10\x4f\x71\x18\x32\xbf\xbb\xcc\xb3\x75\xf3\xa1\x63\xaf\xbc\xaa\x61\x07\xa5\xc6\x36\xed\x7f\x04\x73\xb3\xde\x76\x6c\x09\x59\xe5\x7b\x9e\x4c\x8b\x0a\x13\x3b\x02\x51\x69\x89\x43\xde\x6a\x79\x00\xf6\x4a\x43\xec\xcc\xaa\x6e\x66\x93\xb4\x9b\xf3\x2f\x6d\x83\x13\xc4\x1f\x7a\xca\xf7\x03\x9e\x6e\xe9\xf5\xcd\x66\x50\x31\xc8\x8f\x3a\x6d\xca\x4a\x83\xa0\x93\xd3\x6d\x22\x5b\xae\x2d\x55\x4c\xe3\x6f\xbb\x88\x03\x1e\x75\x98\x56\x55\x2a\x94\xd5\xc1\xa9\xa0\x09\x2e\x7f\x9c\x50\x79\x9a\xe3\xcd\x35\x9b\x2a\x10\x30\x78\xf8\x0c\x61\x26\x4f\xa1\x3e\x2a\x05\x0f\x0f\xbd\xaa\xda\xd1\xf2\x3d\xcb\x9b\x9e\x27\xe6\xad\x30\xe1\x1d\x7e\x05\x61\xc7\xb6\x2b\xdb\x6b\xce\x71\x54\xee\xc3\x0b\x39\xba\x7c\x81\x5d\xe5\x09\x11\x63\x90\x0a\x01\x71\xcd\x14\x49\x18\xa7\xdf\x04\xeb\xac\x41\xb4\x01\x1e\x41\xc2\x12\xbe\x4e\x50\x78\xdf\xeb\x9c\x73\xfa\x79\xd0\x3f\xbf\x83\x18\x59\x50\xd1\x88\x69\x00\x73\x11\x09\x93\x4b\x30\x45\x99\x37\x30\x84\xb1\x70\x16\x3f\x9f\xa1\xa9\x8f\x72\x48\x9b\x46\x34\x47\xb3\xfa\xdf\xf7\xca\x1c\x06\x55\x47\xb7\x5a\x19\x5f\x39\xc6\x13\x3e\xd3\x71\x09\x4d\x21\x35\x92\xe0\xed\x44\x3f\xac\x63\xdb\x0e\x6f\xaf\x49\x07\x65\x70\x0a\xb5\xdd\x6c\x30\x44\x39\xd8\x6e\xc7\x8b\xee\xbd\x7e\x56\x60\x8e\x69\x31\x38\x22\x06\x5b\x48\x79\x87\x6c\x41\x4f\xab\x86\x2e\x04\xeb\xba\x09\x7f\xcc\x75\x40\xba\xf6\x15\x4f\x74\x3f\x2f\x9d\x27\x46\x6b\x3c\x5f\xad\x6d\x6c\x0b\xd1\x55\x38\x73\xee\x2b\xd7\xc8\x59\xcb\x3b\xd4\xa5\x6e\x72\x60\x00\xf7\xc1\xe2\x93\x81\x7b\x93\xa0\xcd\x1c\xa9\xd9\xf8\x6b\x39\x7a\x38\xbd\xd7\x46\x40\xef\x65\x03\xbc\x67\xe8\x13\x54\xf7\xa2\x85\x54\x87\x5b\x7b\xf4\x52\x54\xbf\x0d\x50\x16\x61\x22\xe0\xbd\xb0\xbb\x44\xd0\x6f\x2d\x93\xa8\xdf\xc8\x0c\xf4\x0a\x83\x70\x14\x9a\x48\x07\xf8\x37\x30\x27\x92\xd6\x13\xf4\x81\x8b\x7e\x07\x4a\xa0\x02\x78\xa3\x2f\x9b\xd8\xab\xa5\x36\xe1\x3d\x31\x0b\xe9\x1f\x45\x1f\xd4\x18\x82\xf9\x19\xc2\x00\x9d\x3c\xb9\x6e\xf7\xfb\x86\x38\x0e\x89\x0e\x88\x97\x5b\xdf\x68\x34\x8f\x5b\x11\xbb\xfc\x24\xd2\x64\x33\x06\xb9\xac\x2a\xfe\xdf\x00\x00\x00\xff\xff\x4c\x2e\xf9\x29\xc7\x05\x00\x00")

func bashenvCmdBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvCmdBash,
		"bashenv/cmd.bash",
	)
}

func bashenvCmdBash() (*asset, error) {
	bytes, err := bashenvCmdBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/cmd.bash", size: 1479, mode: os.FileMode(420), modTime: time.Unix(1492033206, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvFnBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x51\x41\x6e\xc2\x30\x10\x3c\xc7\xaf\x18\xad\x22\x01\xaa\xa2\x08\xae\x34\x3d\x56\xea\x1b\x28\x07\xcb\xac\x89\xd5\xd4\x89\x6c\x03\xaa\x28\x7f\xef\x1a\xd2\x92\x43\x55\x55\xb9\x64\x77\x66\x67\x76\xd6\xca\xfa\x4a\x87\x7d\x9c\x2f\x70\x56\xc5\x8e\x4d\xa7\x03\x63\xc7\xd1\x34\xf4\xe2\xe3\xc0\x26\x41\xc3\x1e\xbc\x49\xae\xf7\xb3\x08\x21\x1f\xde\xd9\xa7\x48\xaa\xe8\x7a\xa3\xbb\xdc\xe9\x9c\xe7\xa6\x9c\xa7\x8f\x81\x51\x2e\xf1\x89\x7d\xe0\x01\xdf\x6a\x63\x59\x1d\x41\x53\x03\x12\xa0\x65\xbd\x43\xb5\x5c\xa8\x82\x4d\xdb\xa3\x62\x50\x79\x1e\x05\xeb\x1a\x35\xbd\x7a\xba\x64\xa2\x3e\xbd\xa1\x7a\x6e\x30\xab\x9b\xfa\x3c\x04\xe7\x13\xe8\x91\xca\x25\x3d\xd1\x65\x26\x78\x0a\xc8\x5c\xc8\xa7\x2e\x2a\xa7\xca\x16\xff\x4e\x95\xa1\xe0\x86\x5c\x51\x1e\xc8\x44\xf9\xe1\xa3\xe4\xa3\x5f\x82\x45\x33\x59\x9e\xd6\xb8\x6e\x5f\xe6\xfe\xe8\xee\xbc\xed\xff\x70\x8f\x13\x7b\xba\x73\xac\x6f\x72\x26\xc4\xb6\x3f\xc5\xfe\x10\x0c\x4b\xbd\xa2\xf1\x3a\x54\x5a\x8f\x72\x3e\xbe\x18\xa4\x5a\xfc\x40\xb8\x01\xd7\xcd\x26\x80\x2a\x9c\xc5\x66\x23\xa3\x77\x49\xc2\x76\xbb\x46\x6a\xd9\xab\xa2\xb8\x25\x13\x5d\x39\xa1\x76\x1d\x2a\x8f\x87\x95\xf4\x6f\xc3\xd6\x49\x9c\xaf\x00\x00\x00\xff\xff\x5c\xaf\x12\xe0\x23\x02\x00\x00")

func bashenvFnBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvFnBash,
		"bashenv/fn.bash",
	)
}

func bashenvFnBash() (*asset, error) {
	bytes, err := bashenvFnBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/fn.bash", size: 547, mode: os.FileMode(420), modTime: time.Unix(1492033206, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvPlugnBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x58\x5f\x6f\xdb\x38\x0c\x7f\x4e\x3e\x05\xa7\xe5\xba\x66\x80\x93\xb5\x87\x7b\x59\x2f\xc5\x86\xad\xd8\x0a\x0c\x5b\xd1\x6e\x77\x0f\xdb\x50\xb8\xb6\x9c\x08\xb5\x2d\xcf\x92\x93\xfe\x59\xbf\xfb\x91\x92\x6c\xcb\xa9\x93\x76\xb7\x97\xd4\xa6\x28\xea\x47\xf2\x47\x52\xee\x70\xc9\x4b\x25\x64\xbe\x3b\x86\xdb\xe1\x20\xe6\x51\x1a\x96\x1c\x62\xae\xa2\x19\x3b\x5b\xc8\x15\xb8\x75\x36\x1c\xf0\x68\x21\x81\x15\x69\x35\xcf\x5f\xc2\xe8\xf6\xe4\xc3\x97\x77\x1f\xcf\xff\x39\x3a\x3d\x3b\xfe\xf4\xf1\x65\x10\xf3\xe5\x1d\x1b\xde\x0d\x87\x22\x57\x3a\x4c\xd3\x3e\x83\xc7\x76\x09\x42\xc8\xf9\x0a\xc8\x92\xc8\x21\x29\x65\x86\x92\x77\x42\xc3\x97\xd3\x0f\xac\xdd\x53\x95\xe9\x8c\x8d\xf6\x18\xe4\x61\xc6\xf1\x69\x1f\xd7\x52\x19\x85\x29\x5c\x84\x8a\x27\x22\xe5\xb4\x00\xb1\x5c\xe5\xa9\x0c\x63\x5e\x42\x58\xce\x15\x44\x32\xd7\x3c\xd7\xf8\xb0\x8a\x87\x03\x5f\x15\x6d\xec\xd2\xbb\xd9\xc6\x46\x68\x9f\x8d\xd1\x66\x51\xa9\x45\x8c\xef\xe4\xd0\xf1\xc7\xf3\x93\xd7\x9f\xdf\x4f\xc3\x65\x28\xd2\xf0\x22\xe5\x0c\x76\x0e\xa7\xe8\xdb\x34\xaf\xd2\x74\x38\x10\x09\x7c\xfd\x8a\xba\xbe\x59\x06\xb3\x19\x3c\x9f\xe8\xb0\x9c\xcc\x6f\xe0\xfb\x77\xf8\xf9\x73\xb3\x92\xd1\x38\x00\xbd\xe0\xf9\x70\x30\x58\x2d\x44\xb4\x80\x08\x91\xc0\x21\x34\xc7\xc0\xfe\xe1\xce\x1e\xec\xec\x78\xae\xcd\x18\x29\x31\x12\x92\x93\x33\x16\x28\x0a\x95\x33\xb0\x9a\x73\xfd\xa0\x01\x52\xf2\x0d\xfc\x80\x20\xc8\xc2\xab\xa0\xe4\xb1\x28\x79\xa4\x67\x7b\x10\x7c\x0a\xd8\x10\xad\x5a\x2f\x83\x1b\xf4\xa1\xb5\xc0\x7c\xe0\x8e\x0c\x27\x29\x47\x1f\xc1\xa5\x1c\xb8\xc0\xe5\xd2\xfa\x23\x4b\x0b\x4b\xcb\x66\x79\x29\x42\xb0\x51\x62\xb0\x77\xb8\xb3\x6f\xec\x5c\x61\xde\xf7\xf0\x29\x11\xf8\x93\x5d\x22\x16\x08\x0a\xa0\x6c\x13\xd6\x6f\xa4\xd3\x45\x31\x32\x59\xb6\xe9\x83\x9f\x64\x10\xae\x6e\x20\x78\xd3\xdd\x53\x27\x75\x7f\x2d\x81\x83\xa7\x90\x85\x97\x1c\x54\x85\x0c\x5b\x21\xc9\x72\x34\x80\x21\x40\x06\x2a\x91\xcf\x53\xe4\x13\x22\x10\x39\xc2\x96\x55\x49\xd6\xd1\x09\xdc\x56\xb3\xea\x1c\x97\xd5\x6c\x77\xb4\x9b\x88\x3c\x86\x09\x50\x08\x63\x5e\xe8\x05\x60\xf8\x72\xa9\x11\x7c\x88\x2f\xcf\x26\xcf\x20\xd0\xd7\x05\x9a\x1b\x8f\xfd\xed\xc4\x87\x8d\xfb\xcd\x86\xc4\x6c\xa8\x89\x76\xfb\xb4\x73\xf2\xd7\x57\xdf\xef\x18\x04\xfc\x07\xaa\x23\xd3\xd0\xdb\xae\x96\xb5\xdf\x6a\xbd\xe8\x24\xcd\x06\x65\x32\x7d\xee\xc7\xa4\x09\xd9\xe0\x11\x2e\xf1\x2b\x1e\x41\xb6\x84\x20\x81\xdb\x3b\x98\x4c\xa6\xf0\xed\x80\xf6\x62\xad\x61\x75\x9d\xfc\xfb\x96\x99\x73\x64\x11\xaf\x85\x7d\x50\x66\x14\x58\x36\x42\x4d\xe6\xd2\xcd\x53\xc5\xf1\x71\x8e\x0c\x88\x52\x99\xd7\x35\x09\x23\x64\x06\xad\x3b\x33\x2d\xaf\xa9\xbd\x54\xf9\x96\x06\x73\xca\x33\xb9\xe4\xdd\xce\x52\x57\xb2\x93\x2a\xaf\xc3\x58\x89\x69\x32\x43\x04\x08\x41\x99\xac\xf5\x01\xac\x5d\xdc\x1a\x4f\x47\x56\x75\x93\x5a\x73\x48\xab\x48\x50\x8b\x38\xd4\xbc\x0f\xe7\x17\xb3\x52\xe3\x0c\x31\xec\xb2\xd0\xd8\x65\xd1\xad\x6b\x28\x50\x84\xf4\x8b\x64\x96\x09\x3d\xd5\xe1\x7c\x7a\x51\x86\x79\xb4\xe8\x07\xee\xf4\xb4\x50\x0b\xd7\x23\x91\x11\x4f\x20\xd8\xd8\xd1\x1a\x88\x8e\x40\x75\x25\x1b\x28\xbb\x6e\x71\x0c\x94\x78\x17\x69\x1e\x9b\xba\xaa\x4b\x75\x6b\xbf\x6c\xad\x77\xf2\x5f\xb7\x93\x16\x2c\x6b\xf9\xfb\x04\x46\xbb\x44\x02\x75\x9d\x5d\xc8\x54\x44\xd8\x92\x12\x78\x7f\xf4\xfa\xed\xb8\x0f\x22\x86\x27\xc7\x7a\xc5\x08\x8d\x76\xff\x46\x32\x4f\xec\x81\xe7\xad\xe9\x71\x0b\xf7\xc5\xd0\xd2\x6b\xc1\xa3\x4b\x59\x69\xac\x7d\xa5\xb1\x43\x75\x48\x65\x34\x0a\x53\x09\xf7\xc4\xcd\xc6\x60\x6d\xd1\xb5\xc8\xfc\x9e\x4f\x4d\xb5\xd1\xf6\x84\x6b\x6c\xcf\x41\x80\x49\x54\x6b\x06\xba\xe6\x3d\x23\xeb\x7a\xd6\xf9\xce\x29\x87\xbd\x6e\x0f\xdb\xae\xbc\x96\x4b\x4b\xc4\xd8\x10\xcd\x0b\x9f\x67\xb2\x29\xc6\xed\x16\xd8\x96\xc2\x4c\x85\xd2\x7d\x5c\xff\x80\x72\xa0\xf6\x6f\x67\x77\x5b\x85\x6a\x81\xa4\x87\x40\x01\x59\x98\xa7\xf2\x02\x8d\xe3\xd4\x30\xcd\x06\x0f\xdf\xc0\xaf\xe7\x07\x38\xd5\x10\xa8\x6f\xad\x33\xd8\x47\x64\x80\xe6\xba\x53\x41\x0a\xeb\x4a\x91\x0a\x25\x8c\xc3\xb6\xfa\xf6\xf9\xe6\x96\x68\x9a\x9b\xf7\x58\x28\x23\xf0\x4c\xbb\xbb\x11\xd9\x8e\x42\x6d\x4f\x9e\x5a\x4b\x13\x2d\xb3\x94\xc6\x13\xfe\x09\x68\x0e\xb2\xba\x2e\x58\x7d\xa3\xf2\x0c\xd9\x48\xfd\x92\x15\xda\x52\x0a\xd3\x35\xac\xa5\xa2\xc4\xa9\x85\x8d\x09\xe0\x8f\x60\xff\x85\xc2\xdf\xbf\xe8\x67\x8f\x1e\xd5\x37\xda\xd2\x94\x26\x1b\xd5\x18\xf0\xd1\xc6\x87\x9e\xc8\x24\x35\x19\x6c\xc5\x4d\x76\xaa\x36\x3b\x98\x63\x5d\x8a\xf9\x9c\x97\x7d\x69\xfe\x6c\x97\x14\x2c\xa4\xbc\xa4\xfc\xd5\xf1\xbb\xdf\x76\x49\xc3\xf4\xae\x03\x50\x0b\x91\xe8\xcd\x54\xb0\x49\x59\x27\x43\x9d\xb4\x9a\x0a\x7c\x89\x21\xa4\xe8\xc9\x3c\x11\x73\x9c\x51\x85\x2c\x31\x8e\x3e\x25\x2c\x8d\x31\x4e\x00\x03\xd3\x8c\xae\x9a\x70\x4c\x47\x84\xa7\x6e\x47\x1d\x21\xea\xbc\xda\x12\x90\x81\x0b\x47\x30\xc7\xda\x58\x85\xd7\xe0\x6d\xc2\x60\x59\x98\x7d\xb1\x3a\x32\x2b\x78\xe5\x68\xa6\x4a\xef\x44\xf2\x6e\x43\x3d\xee\xd3\x6d\x38\xc7\x41\xac\x1e\x6e\xc5\x0f\xce\x34\x4e\x97\xab\xda\x0d\xc2\xee\xc8\xde\x07\xfe\xad\x5d\xfa\x7d\xf4\x38\x49\x7f\x1d\x98\xcb\x31\xd6\x42\x1f\xb6\x77\x58\x22\x8e\x34\x56\xb1\x2a\x43\x6d\xbf\x5e\xfa\x46\xa7\xf7\x61\x41\x95\xd7\x45\x63\x0d\x98\x0a\x64\x9d\x12\xf4\xc2\x6a\x6e\xf6\x1e\x2c\x4b\xbd\xde\x94\x5b\x52\x3e\x1e\xdc\x63\x21\x39\xb6\x33\xff\xe2\xe1\xd0\xa8\xfe\x20\x9d\xfd\xcf\x20\x01\x96\x59\x45\x8f\x7f\xd6\x1f\x83\x66\xfc\x19\x69\x03\x47\xf1\xad\xa0\x7b\x83\x27\x72\xd1\x0b\xf4\x18\xe5\x22\x4c\xc5\x0d\x92\x0d\xfb\x49\x56\xe8\xeb\x1a\x38\xf5\xc8\x8d\x1c\xc3\x05\x2d\x2b\x1c\xbc\x9b\x81\x3c\x82\x9e\x1b\x14\xda\x2f\xc3\xfa\x8b\xb8\x85\x19\x3b\x90\x34\x3e\x73\x1f\xea\x7a\x0b\x33\x6e\x9f\x2b\xfc\xc2\x88\x7a\x6b\xec\xcc\xac\x98\xab\x1d\xce\x6c\x05\xd4\x0c\x8d\xf6\xda\x45\xf6\x77\xfa\x66\xdd\x09\x13\xaf\x13\xde\x6f\x99\x93\xf6\xa6\x66\xbd\xb5\xa0\xe1\x81\x2d\x5b\xa7\x48\x16\x0a\xf7\xff\x06\x62\x4b\xc0\x25\x5e\x4a\x0a\x9e\x60\x5c\x0f\xec\xe7\xcc\xe7\xd3\xd7\x6f\x8e\xea\x63\x8d\xce\x15\x7e\x96\x46\x59\x5c\xb3\xdd\x8d\xaf\x8e\xcc\x5d\x56\x3b\xb2\xe6\x63\xa1\x2b\x35\x97\x99\x8e\x88\x2e\x2f\x1d\x81\x6b\xed\x1d\x99\x8d\x5f\x47\xe4\xfa\x64\x47\xe6\xf2\x5a\x87\x8a\xf9\x8b\x41\xae\x5c\xd1\x35\x97\xac\xf5\x1a\xf4\x2c\xb5\xcd\xae\x4f\x6c\xdf\xfa\x56\xd4\xda\x06\x2a\x30\x17\x40\x3c\x9f\xb1\x7a\x44\xfd\x17\x00\x00\xff\xff\xda\xbc\x90\x39\xfd\x11\x00\x00")

func bashenvPlugnBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvPlugnBash,
		"bashenv/plugn.bash",
	)
}

func bashenvPlugnBash() (*asset, error) {
	bytes, err := bashenvPlugnBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/plugn.bash", size: 4605, mode: os.FileMode(420), modTime: time.Unix(1492033206, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bashenv/bash.bash": bashenvBashBash,
	"bashenv/cmd.bash": bashenvCmdBash,
	"bashenv/fn.bash": bashenvFnBash,
	"bashenv/plugn.bash": bashenvPlugnBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bashenv": &bintree{nil, map[string]*bintree{
		"bash.bash": &bintree{bashenvBashBash, map[string]*bintree{}},
		"cmd.bash": &bintree{bashenvCmdBash, map[string]*bintree{}},
		"fn.bash": &bintree{bashenvFnBash, map[string]*bintree{}},
		"plugn.bash": &bintree{bashenvPlugnBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

